{"version":3,"sources":["componments/ImageGallery.jsx","pages/Train/DialogUpload.jsx"],"names":["withStyles","theme","image","margin","props","classes","className","imageSrc","imageWidth","imageHeight","imageText","renderPreview","map","react","id","key","src","width","height","alt","react_flip_move_es","classNames","DialogUpload","state","imageFile","handleAccept","event","_this","length","preventDefault","actionsT","faceAdd","setState","actionsI","infoSet","onoff","variant","message","handleUpload","data","i","target","files","dataTemp","URL","createObjectURL","push","Dialog_default","a","open","this","dialogStatus","onClose","toggleDialog","aria-labelledby","aria-describedby","maxWidth","DialogTitle_default","DialogContent_default","componments_ImageGallery","DialogActions_default","Tooltip_default","title","IconButton_default","icon","component","color","hidden","type","name","accept","onChange","required","multiple","AddPhotoAlternate_default","onClick","CloudUpload_default","Cancel_default","React","connect","dispatch","bindActionCreators","actionTrain","actionInfo","display"],"mappings":"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","file":"static/js/4.d4573d42.chunk.js","sourcesContent":["// @flow\n\nimport * as React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport FlipMove from 'react-flip-move'\nimport { withStyles } from '@material-ui/core/styles'\n\nconst styles = (theme: Object) => ({\n  image: {\n    margin: '1px'\n  }\n})\n\ntype Props = {\n  classes: Object,\n  className: string,\n  imageSrc: string[],\n  imageWidth: number,\n  imageHeight: number,\n  imageText: string\n}\n\nconst ImageGallery = (props: Props) => {\n  const {\n    classes,\n    className,\n    imageSrc,\n    imageWidth,\n    imageHeight,\n    imageText\n  } = props\n  const renderPreview = imageSrc.map(image => (\n    <img\n      className={classes.image}\n      id={image}\n      key={image}\n      src={image}\n      width={imageWidth}\n      height={imageHeight}\n      alt={imageText}\n    />\n  ))\n  return (\n    <FlipMove className={classNames('flip-wrapper', className)}>\n      {renderPreview}\n    </FlipMove>\n  )\n}\n\nImageGallery.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  imageSrc: PropTypes.array,\n  imageWidth: PropTypes.number,\n  imageHeight: PropTypes.number,\n  imageText: PropTypes.string\n}\n\nexport default withStyles(styles)(ImageGallery)\n","// @flow\n\nimport * as React from 'react'\nimport PropTypes from 'prop-types'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport * as actionInfo from '../../actions/info.action'\nimport * as actionTrain from '../../actions/train.action'\nimport type { Dispatch } from '../../models'\nimport { withStyles } from '@material-ui/core/styles'\nimport ImageGallery from '../../componments/ImageGallery'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport IconButton from '@material-ui/core/IconButton'\nimport IconAdd from '@material-ui/icons/AddPhotoAlternate'\nimport IconUpload from '@material-ui/icons/CloudUpload'\nimport IconCancel from '@material-ui/icons/Cancel'\n\nconst styles = (theme: Object) => ({\n  hidden: {\n    display: 'none'\n  }\n})\n\ntype ProvidedProps = {\n  classes: Object\n}\n\ntype Props = {\n  actionsI: Dispatch,\n  actionsT: Dispatch,\n  dialogStatus: boolean,\n  toggleDialog: (target: string, onoff: boolean, key: number) => () => null\n}\n\ntype State = {\n  imageFile: string[]\n}\n\nclass DialogUpload extends React.Component<ProvidedProps & Props, State> {\n  state = {\n    imageFile: []\n  }\n\n  handleAccept = (event: SyntheticEvent<HTMLInputElement>) => {\n    if (this.state.imageFile.length > 0) {\n      event.preventDefault()\n      this.props.actionsT.faceAdd(this.state.imageFile)\n      this.setState({\n        imageFile: []\n      })\n    } else {\n      this.props.actionsI.infoSet({\n        onoff: true,\n        variant: 'error',\n        message: 'Please select an image'\n      })\n    }\n  }\n\n  handleUpload = (event: any) => {\n    const data = []\n\n    for (let i = 0; i < event.target.files.length; i += 1) {\n      let dataTemp\n      if (event.target.files[i] != null) {\n        dataTemp = URL.createObjectURL(event.target.files[i])\n        data.push(dataTemp)\n      }\n    }\n\n    if (data.length > 0) {\n      this.setState({\n        imageFile: data\n      })\n    } else {\n      this.setState({\n        imageFile: []\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.dialogStatus}\n        onClose={this.props.toggleDialog('upload', false, 0)}\n        aria-labelledby=\"select-dialog-title\"\n        aria-describedby=\"select-dialog-description\"\n        maxWidth={'md'}>\n        <DialogTitle id=\"select-dialog-title\">Upload</DialogTitle>\n        <DialogContent>\n          <ImageGallery\n            imageSrc={this.state.imageFile}\n            imageWidth={256}\n            imageHeight={256}\n            imageText={'upload files'}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Tooltip title=\"Select Image\">\n            <IconButton\n              className={this.props.classes.icon}\n              component=\"label\"\n              color=\"primary\">\n              <input\n                className={this.props.classes.hidden}\n                type=\"file\"\n                name=\"fileUpload\"\n                accept=\"image/*\"\n                onChange={this.handleUpload}\n                required\n                multiple\n              />\n              <IconAdd />\n            </IconButton>\n          </Tooltip>\n          {this.state.imageFile.length > 0 ? (\n            <Tooltip title=\"Upload Image\">\n              <IconButton\n                className={this.props.classes.icon}\n                onClick={this.handleAccept}\n                color=\"primary\">\n                <IconUpload />\n              </IconButton>\n            </Tooltip>\n          ) : null}\n          <Tooltip title=\"Close\">\n            <IconButton\n              className={this.props.classes.icon}\n              onClick={this.props.toggleDialog('upload', false, 0)}\n              color=\"secondary\">\n              <IconCancel />\n            </IconButton>\n          </Tooltip>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n}\n\nDialogUpload.propTypes = {\n  classes: PropTypes.object.isRequired,\n  dialogStatus: PropTypes.bool.isRequired,\n  toggleDialog: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => {\n  return {}\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actionsT: bindActionCreators(actionTrain, dispatch),\n    actionsI: bindActionCreators(actionInfo, dispatch)\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(DialogUpload))\n"],"sourceRoot":""}